@page "/auth/settings"
@inject UserService UserService
@inject IUserRepository UserRepo
@inject ITokenRepository TokenRepo
@inject ILogger<Settings> Logger
@inherits CancellationComponent
@attribute [Authorize]

<MudTabs Position="Position.Left" Border="true" Outlined="true" Elevation="5" Rounded="true">
    <MudTabPanel Text="General">
        <MudForm @ref="_form">
            <AccountInputComponent User="UserService.CurrentUser" SaveClick="Save" IsLoading="_isLoading" @bind-ErrorMessage="_error"/>
        </MudForm>
    </MudTabPanel>
    <MudTabPanel Text="TOKENS">
        <DataInit T="List<Token>" Data="Tokens" Context="tokens">
            <TokenList Tokens="tokens" @bind-ErrorMessage="_error" OnTokenDeactivate="HandleTokenDeactivation" OnTokenReactivate="HandleTokenReactivation" OnTokenDelete="HandleTokenDeletion"/>
        </DataInit>
    </MudTabPanel>
</MudTabs>

@code {
    MudForm _form = null!;
    bool _isLoading;
    string? _error;

    List<Token> Tokens { get; set; } = null!;

    protected override async Task OnInitializedAsync() {
        try {
            Tokens = await TokenRepo.ReadForUserAsync(UserService.CurrentUser!.Id, Cts.Token);
        }
        catch (TaskCanceledException) {
            Logger.LogInformation("Settings user-update canceled");
        }
        catch (OperationCanceledException) {
            Logger.LogInformation("Settings user-update canceled");
        }
        catch (Exception e) {
            _error = "An error occurred!";
            Logger.LogError(e, "Settings user-update failed");
        }
    }

    async Task Save() {
        try {
            if (!await _form.IsFormValidAsync()) return;
            _isLoading = true;
            await UserRepo.UpdateInfoAsync(UserService.CurrentUser!, Cts.Token);
        }
        catch (DuplicateEmailException) {
            _error = "Invalid email!";
        }
        catch (TaskCanceledException) {
            Logger.LogInformation("Settings user-update canceled");
        }
        catch (OperationCanceledException) {
            Logger.LogInformation("Settings user-update canceled");
        }
        catch (Exception e) {
            _error = "An error occurred!";
            Logger.LogError(e, "Settings user-update failed");
        }
        finally {
            _isLoading = false;
            StateHasChanged();
        }
    }

    async Task HandleTokenDeletion(Token token) {
        try {
            await TokenRepo.SetDeletedAsync(token, Cts.Token);
            Tokens.Remove(token);
        }
        catch (TaskCanceledException) {
            Logger.LogInformation("Action canceled");
        }
        catch (OperationCanceledException) {
            Logger.LogInformation("Action canceled");
        }
        catch (Exception e) {
            _error = "An error occurred!";
            Logger.LogError(e, "Action failed");
        }
    }

    async Task HandleTokenReactivation(Token token) {
        try {
            await TokenRepo.SetActiveAsync(token, Cts.Token);
        }
        catch (TaskCanceledException) {
            Logger.LogInformation("Action canceled");
        }
        catch (OperationCanceledException) {
            Logger.LogInformation("Action canceled");
        }
        catch (Exception e) {
            _error = "An error occurred!";
            Logger.LogError(e, "Action failed");
        }
    }

    async Task HandleTokenDeactivation(Token token) {
        try {
            await TokenRepo.SetInactiveAsync(token, Cts.Token);
        }
        catch (TaskCanceledException) {
            Logger.LogInformation("Action canceled");
        }
        catch (OperationCanceledException) {
            Logger.LogInformation("Action canceled");
        }
        catch (Exception e) {
            _error = "An error occurred!";
            Logger.LogError(e, "Action failed");
        }
    }

}